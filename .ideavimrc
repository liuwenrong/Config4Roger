" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }
"
" Environment 环境配置{{{
    
    "基础设置{{{
        set nocompatible    "避免进入vi模式"
        filetype plugin on
        set showcmd
        set mouse=a
        colo evening
        set terse
        set warn
        "set number
        set nonu
        set diffexpr=MyDiff()
        set ruler "可显示最后一排的状态
        set showmode "左下角那一行的状态
        set list "显示换行符$
    "}}}
    "
    "光标类型{{{
        "普通模式下用块状光标，在插入模式下用条状光标（形状类似英文 "I" 的样子），然后在替换模式中使用下划线形状的光标"
        if empty($TMUX)
          let &t_SI = "\<Esc>]50;CursorShape=1\x7"
          let &t_EI = "\<Esc>]50;CursorShape=0\x7"
          let &t_SR = "\<Esc>]50;CursorShape=2\x7"
        else
          let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
          let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
          let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
        endif
     "}}}
     "
    "KeyMap Leader 键盘命令注:注释不能在语句之后{{{
        "使用的时候要按住空格\<Space>不可用,可用 空可用 不放"
        let mapleader=" "
        let localleader="\"
    "}}}

            "vimrc和保存退出{{{
                nmap <silent> <leader>ev :e $MYVIMRC<CR>
                nmap <silent> <leader>sv :so $MYVIMRC<CR>
                nmap <A-w> :w<CR>
                nmap <A-q> :q<CR>
                nmap <localLeader>q :q<CR>
            "}}}

            "便捷{{{
                "如果你希望 n 始终为向后搜索，N 始终为向前搜索，那么只需要这样设置：
                nnoremap <expr> n  'Nn'[v:searchforward]
                nnoremap <expr> N  'nN'[v:searchforward]
                "Vim 用户都不愿意去按方向键，事实上我们也不需要去按，只需要设置这样的映射：
                cnoremap <c-n> <down>
                cnoremap <c-p> <up>
             "}}}

            "光标移动{{{
                map <CR> gg
                imap <C-h> <Left>
                imap <C-j> <Down>
                imap <C-k> <Up>
                imap <C-l> <Right>
                "fj同时按相当于退出"
                "inoremap fj <C-o>       
                imap <C-i> <Esc>
                "map <F2> i{<Esc>ea}<Esc>
                map <F1> i + "--1703"<Esc>i
               "回到句首"   "回到句末"
                imap <C-a> <Esc>^
                imap <C-e> <Esc>$
                " Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
                "map <Space> /
                "nmap, <C-Space> ?
                " useable
                map J j
             "}}}

            "窗口移动{{{
                " Smart way to move between windows
                nmap <C-j> <C-W>j
                nmap <C-k> <C-W>k
                nmap <C-h> <C-W>h
                nmap <C-l> <C-W>l
                "map <F10> :<Esc>:tabnew<CR>
                "map <A-e> :browse tabnew<CR>
             "}}}

             "复制相关{{{
                "在插入模式中使用Ctrl+v粘贴全局剪贴板内容
                "inoremap <C-v> <esc>l:set paste<cr>mui<C-R>+<esc>mv'uV'v=:set nopaste<cr>
                "vmap <C-v> "-d"+p
                "imap <C-v> <S-insert>
                "map <C-v> "+p

                "在Visual模式中使用Ctrl+c复制内容到全局剪贴板
                vnoremap <C-c> "+y
                map <C-y> "+y

                "在Visual模式中使用Ctrl+x剪切内容到全局剪贴板
                vnoremap <C-x> "+x
              "}}}

            "缩写{{{
                iab xdate =strftime("%Y-%m-%y")
                iab xdate1 =strftime("%Y-%m-%y %H:%M:%S")
                iab xname liuwenrong.Roger
            "}}}

       "}}}

"Plugins 插件配置{{{

    "路径设置{{{
        "set rtp+=E:/0SoftInstall/msys2_64/usr/share/vim/vim80
        "状态栏插件-美化-漂亮
        "set rtp+=$VIM\bundle\vim-airline
     "}}}

    "EasyMotion配置{{{
            "easymotion 快速定位跳转"
            "set rtp+=$VIM\bundle\vim-easymotion     
            "nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
            "快速查找单词之后的word"没有bd就是之后,有bd就是前后的单词           
            " <Leader>f{char} to move to {char}
            "map  <Leader>f <Plug>(easymotion-bd-f)
            "nmap <Leader>f <Plug>(easymotion-overwin-f)

            "s{char}{char} to move to {char}{char}
            "nmap <Leader><Leader>s <Plug>(easymotion-overwin-f2)

            " Move to line
            "map <Leader><leader>h <Plug>(easymotion-linebackward)
            "map <Leader><leader>l <Plug>(easymotion-lineforward)
            "map <Leader>L <Plug>(easymotion-bd-jk)
            "nmap <Leader>L <Plug>(easymotion-overwin-line)
            "map <Leader><Leader>j <Plug>(easymotion-j)
            "map <Leader><Leader>k <Plug>(easymotion-k)

            " Move to word
            "map  <Leader>s <Plug>(easymotion-bd-w)
            "nmap <Leader>s <Plug>(easymotion-overwin-w)
    "}}}
    
 "}}}



function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction
