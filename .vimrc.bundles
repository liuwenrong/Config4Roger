" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        "set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          "set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

    " Setup Bundle Support {
       "The next three lines ensure that the ~/.vim/bundle/ system works
       filetype off
       set rtp+=~/.vim/bundle/vundle
       call vundle#rc()
    " }

    " Add an UnBundle command {
    function! UnBundle(arg, ...)
      let bundle = vundle#config#init_bundle(a:arg, a:000)
      call filter(g:vundle#bundles, 'v:val["name_spec"] != "' . a:arg . '"')
    endfunction

    "com! -nargs=+         UnBundle
    "\ call UnBundle(<args>)
    "
    "}

" }

" Bundles {

    " Vundle {
           Bundle 'gmarik/vundle'
"        Bundle 'MarcWeber/vim-addon-mw-utils'
"        Bundle 'tomtom/tlib_vim'
"        if executable('ag')
"            Bundle 'mileszs/ack.vim'
"            let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
"        elseif executable('ack-grep')
"            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
"            Bundle 'mileszs/ack.vim'
"        elseif executable('ack')
"            Bundle 'mileszs/ack.vim'
"        endif
    " }
    "
    "Theme Solarized & molokai {
        " 主题 solarized
        Bundle 'altercation/vim-colors-solarized'
        let g:solarized_termcolors=256
        let g:solarized_termtrans=1
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
        " 主题 molokai
        Bundle 'tomasr/molokai'
        let g:molokai_original = 1
        " 配色方案
        set background=dark
        set t_Co=256
        if has('gui')
            colorscheme solarized
            "colorscheme molokai
            "colorscheme phd
        else
            "colorscheme solarized
            colorscheme molokai
            "colorscheme phd
        endif
    "
    "}
    "
    "airLine {
        Bundle 'vim-airline/vim-airline'
        Bundle 'vim-airline/vim-airline-themes'
        "set rtp+=$VIM/bundle/vim-airline      "状态栏插件-美化-漂亮
        " airline 就是状态栏的箭头
        let g:airline_theme="dark"
        let g:airline_powerline_fonts = 1
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#buffer_nr_show = 1
    "}
    "
    "NerdCommenter快速注释<Leader>/{
        Plugin 'vim-scripts/The-NERD-Commenter'
        "set rtp+=$VIM/bundle/The-NERD-Commenter     "快速注释 <leader>c<SPACE> 运行 <leader>cc 注释， <leader>cu 反注释
        nmap <Leader>/ <plug>NERDCommenterToggle
        vmap <Leader>/ <plug>NERDCommenterToggle
        imap <Leader>/ <Esc><plug>NERDCommenterToggle
     "}

    "EasyMotion Config {
        Bundle 'easymotion/vim-easymotion'
        "set rtp+=$VIM/bundle/vim-easymotion     "easymotion 快速定位跳转"
        nmap <Leader>w <Plug>(easymotion-overwin-w)
        "快速查找单词之后的word"没有bd就是之后,有bd就是前后的单词           
        " <Leader>f{char} to move to {char}
        "map  <Leader>f <Plug>(easymotion-bd-f)
        nmap <Leader>; <Plug>(easymotion-overwin-f)
        "nmap <Leader>f <Plug>(easymotion-overwin-f)

        "s{char}{char} to move to {char}{char}
        nmap <Leader>f <Plug>(easymotion-overwin-f2)

        " Move to line
        nmap <Leader><leader>h <Plug>(easymotion-linebackward)
        nmap <Leader><leader>l <Plug>(easymotion-lineforward)
        "map <Leader>L <Plug>(easymotion-bd-jk)
        "nmap <Leader>L <Plug>(easymotion-overwin-line)
        "map <Leader><Leader>j <Plug>(easymotion-j)
        "map <Leader><Leader>k <Plug>(easymotion-k)

        " Move to word
        "map  <Leader>s <Plug>(easymotion-bd-w)
        "nmap <Leader>s <Plug>(easymotion-overwin-w)
    "}

    "Config python-mode{
            if has('gui_running')
                set rtp+=$VIM/bundle/python-mode      "强大的python编辑器"
                let g:pymod = 1 "Turn on the whole plugin"
                let g:pymode_warnings = 1   "When =1, Turn off plugin's warnigs"
                let g:pymod_paths = []      "add paths to sys.path"
                let g:pymode_trim_whitespaces = 1 "保存时去空格"
                let g:pymode_python = 'python'    "配置python 版本为python 或者python3"
                let g:pymode_indent = 1           "配置缩进 PEP8风格"
                let g:pymode_motion = 1           "移动方式 ]] ]M aC "
                let g:pymode_doc = 1 " 通过命令:PymodeDoc arg查阅文档
            "　　let g:pymode_doc_bind = ‘K‘ "Help Doc光标移到参数上面按快捷键K 没有该命令
                "let g:pymode_rope_ropefolder=‘pythonSrc‘ “项目文件在的目录
                "光标下单词查阅文档 '''显示注释的内容'''
                let g:pymode_rope_show_doc_bind = '<leader>d'
                "项目修改后重新生成缓存
                let g:pymode_rope_regenerate_on_write = 1
                "开启补全，并设置<A-\>为默认快捷键
                let g:pymode_rope_completion = 1
                let g:pymode_rope_complete_on_dot = 1
                let g:pymode_rope_completion_bind = '<C+/>'
                "跳转到定义处，同时新建竖直窗口打开
                let g:pymode_rope_goto_definition_bind = '<C-]>'
                let g:pymode_rope_goto_definition_cmd = 'tabnew' "or vnew"
                "重命名光标下的函数，方法，变量及类名
                let g:pymode_rope_rename_bind = '<leader>n'
                "重命名光标下的模块或包
                let g:pymode_rope_rename_module_bind = '<leader>nm'
                "开启python所有的语法高亮
                let g:pymode_syntax = 1
                let g:pymode_syntax_all = 1
                "高亮缩进错误
                let g:pymode_syntax_indent_errors = g:pymode_syntax_all
                "高亮空格错误
                let g:pymode_syntax_space_errors = g:pymode_syntax_all
            else
                syntax off
            endif

    "}


    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'writing', 'neocomplete', 'programming', 'php', 'ruby', 'python', 'javascript', 'html', 'misc',]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            "Bundle 'scrooloose/nerdtree'
            "Bundle 'altercation/vim-colors-solarized'
            "Bundle 'spf13/vim-colors'
            "Bundle 'tpope/vim-surround'
            "Bundle 'tpope/vim-repeat'
            "Bundle 'rhysd/conflict-marker.vim'
            "Bundle 'jiangmiao/auto-pairs'
            "Bundle 'ctrlpvim/ctrlp.vim'
            "Bundle 'tacahiroy/ctrlp-funky'
            "Bundle 'terryma/vim-multiple-cursors'
            "Bundle 'vim-scripts/sessionman.vim'
            "Bundle 'matchit.zip'
            "if (has("python") || has("python3")) && exists('g:spf13_use_powerline') && !exists('g:spf13_use_old_powerline')
                "Bundle 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
            "elseif exists('g:spf13_use_powerline') && exists('g:spf13_use_old_powerline')
                "Bundle 'Lokaltog/vim-powerline'
            "else
                "Bundle 'vim-airline/vim-airline'
                "Bundle 'vim-airline/vim-airline-themes'
            "endif
            "Bundle 'powerline/fonts'
            "Bundle 'bling/vim-bufferline'
            "Bundle 'easymotion/vim-easymotion'
            "Bundle 'jistr/vim-nerdtree-tabs'
            "Bundle 'flazz/vim-colorschemes'
            "Bundle 'mbbill/undotree'
            "Bundle 'nathanaelkane/vim-indent-guides'
            "if !exists('g:spf13_no_views')
                "Bundle 'vim-scripts/restore_view.vim'
            "endif
            "Bundle 'mhinz/vim-signify'
            "Bundle 'tpope/vim-abolish.git'
            "Bundle 'osyo-manga/vim-over'
            "Bundle 'kana/vim-textobj-user'
            "Bundle 'kana/vim-textobj-indent'
            "Bundle 'gcmt/wildfire.vim'
        endif
    " }

    " Writing {
        "if count(g:spf13_bundle_groups, 'writing')
            "Bundle 'reedes/vim-litecorrect'
            "Bundle 'reedes/vim-textobj-sentence'
            "Bundle 'reedes/vim-textobj-quote'
            "Bundle 'reedes/vim-wordy'
        "endif
    " }

    " General Programming {
        "if count(g:spf13_bundle_groups, 'programming')
            "" Pick one of the checksyntax, jslint, or syntastic
            "Bundle 'scrooloose/syntastic'
            "Bundle 'tpope/vim-fugitive'
            "Bundle 'mattn/webapi-vim'
            "Bundle 'mattn/gist-vim'
            "Bundle 'scrooloose/nerdcommenter'
            "Bundle 'tpope/vim-commentary'
            "Bundle 'godlygeek/tabular'
            "Bundle 'luochen1990/rainbow'
            "if executable('ctags')
                "Bundle 'majutsushi/tagbar'
            "endif
        "endif
    " }

    " Snippets & AutoComplete {
        "if count(g:spf13_bundle_groups, 'snipmate')
            "Bundle 'garbas/vim-snipmate'
            "Bundle 'honza/vim-snippets'
            "" Source support_function.vim to support vim-snippets.
            "if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                "source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            "endif
        "elseif count(g:spf13_bundle_groups, 'youcompleteme')
            "Bundle 'Valloric/YouCompleteMe'
            "Bundle 'SirVer/ultisnips'
            "Bundle 'honza/vim-snippets'
        "elseif count(g:spf13_bundle_groups, 'neocomplcache')
            "Bundle 'Shougo/neocomplcache'
            "Bundle 'Shougo/neosnippet'
            "Bundle 'Shougo/neosnippet-snippets'
            "Bundle 'honza/vim-snippets'
        "elseif count(g:spf13_bundle_groups, 'neocomplete')
            "Bundle 'Shougo/neocomplete.vim.git'
            "Bundle 'Shougo/neosnippet'
            "Bundle 'Shougo/neosnippet-snippets'
            "Bundle 'honza/vim-snippets'
        "endif
    " }

    " PHP {
        "if count(g:spf13_bundle_groups, 'php')
            "Bundle 'spf13/PIV'
            "Bundle 'arnaud-lb/vim-php-namespace'
            "Bundle 'beyondwords/vim-twig'
        "endif
    " }

    " Python {
        "if count(g:spf13_bundle_groups, 'python')
            "" Pick either python-mode or pyflakes & pydoc
            "Bundle 'klen/python-mode'
            "Bundle 'yssource/python.vim'
            "Bundle 'python_match.vim'
            "Bundle 'pythoncomplete'
        "endif
    " }

    " Javascript {
        "if count(g:spf13_bundle_groups, 'javascript')
            "Bundle 'elzr/vim-json'
            "Bundle 'groenewege/vim-less'
            "Bundle 'pangloss/vim-javascript'
            "Bundle 'briancollins/vim-jst'
            "Bundle 'kchmck/vim-coffee-script'
        "endif
    " }

    " Scala {
        "if count(g:spf13_bundle_groups, 'scala')
            "Bundle 'derekwyatt/vim-scala'
            "Bundle 'derekwyatt/vim-sbt'
            "Bundle 'xptemplate'
        "endif
    " }

    " Haskell {
        "if count(g:spf13_bundle_groups, 'haskell')
            "Bundle 'travitch/hasksyn'
            "Bundle 'dag/vim2hs'
            "Bundle 'Twinside/vim-haskellConceal'
            "Bundle 'Twinside/vim-haskellFold'
            "Bundle 'lukerandall/haskellmode-vim'
            "Bundle 'eagletmt/neco-ghc'
            "Bundle 'eagletmt/ghcmod-vim'
            "Bundle 'Shougo/vimproc.vim'
            "Bundle 'adinapoli/cumino'
            "Bundle 'bitc/vim-hdevtools'
        "endif
    " }

    " HTML {
        "if count(g:spf13_bundle_groups, 'html')
            "Bundle 'amirh/HTML-AutoCloseTag'
            "Bundle 'hail2u/vim-css3-syntax'
            "Bundle 'gorodinskiy/vim-coloresque'
            "Bundle 'tpope/vim-haml'
            "Bundle 'mattn/emmet-vim'
        "endif
    " }

    " Ruby {
        "if count(g:spf13_bundle_groups, 'ruby')
            "Bundle 'tpope/vim-rails'
            "let g:rubycomplete_buffer_loading = 1
            ""let g:rubycomplete_classes_in_global = 1
            ""let g:rubycomplete_rails = 1
        "endif
    " }

    " Puppet {
        "if count(g:spf13_bundle_groups, 'puppet')
            "Bundle 'rodjek/vim-puppet'
        "endif
    "" }

    " Go Lang {
        "if count(g:spf13_bundle_groups, 'go')
            ""Bundle 'Blackrush/vim-gocode'
            "Bundle 'fatih/vim-go'
        "endif
    " }

    " Elixir {
        "if count(g:spf13_bundle_groups, 'elixir')
            "Bundle 'elixir-lang/vim-elixir'
            "Bundle 'carlosgaldino/elixir-snippets'
            "Bundle 'mattreduce/vim-mix'
        "endif
    " }

    " Misc {
        "if count(g:spf13_bundle_groups, 'misc')
            "Bundle 'rust-lang/rust.vim'
            "Bundle 'tpope/vim-markdown'
            "Bundle 'spf13/vim-preview'
            "Bundle 'tpope/vim-cucumber'
            "Bundle 'cespare/vim-toml'
            "Bundle 'quentindecock/vim-cucumber-align-pipes'
            "Bundle 'saltstack/salt-vim'
        "endif
    " }

    endif

" }

" Use fork bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.fork"))
        source ~/.vimrc.bundles.fork
    endif
" }

" Use local bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.local"))
        source ~/.vimrc.bundles.local
    endif
" }
